/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'dAmihl' at '25.03.16 16:49' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile 'com.googlecode.json-simple:json-simple:1.1'
}

jar {

    archiveName = "dshw04.jar"

    from {

        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': 'client.ClientApplication'
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

version = 0.1

task clientJar(type: Jar){
	from(sourceSets.main.output){
	include "client/**"
	include "utils/**"
	include "rmiutils/**"
	}
	
	manifest {
        attributes 'Implementation-Title': 'Client Jar',  
        	'Implementation-Version': version,
        	'Main-Class': 'client.ClientApplication'
    	}




	archiveName = "client.jar"


	from {

        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        }
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'

}

task serverJar(type: Jar){
	from(sourceSets.main.output){
	include "server/**"
	include "utils/**"
	include "rmiutils/**"
	}

	 manifest {
        attributes 'Implementation-Title': 'Server Jar',             
                'Implementation-Version': version,
                'Main-Class': 'server.ServerApplication'
        }
	archiveName = "server.jar"

	from {

        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'

}

task all{
dependsOn serverJar
dependsOn clientJar
}
